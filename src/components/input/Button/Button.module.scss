@mixin dynamic-text($default, $hover, $active) {
    color: $default;

    &:not([disabled], .disabled) {
        &:hover {
            color: $hover;
        }

        &:active {
            color: $active;
        }
    }
}

@mixin outline($border, $borderHover, $borderSelected) {
    border: 1px solid $border;

    &:not([disabled], .disabled) {
        &:hover {
            border-color: $borderHover;
        }

        &:active {
            border-color: $borderSelected;
        }
    }
}

@mixin ghost() {
    border: none;
    background: transparent;

    &:not([disabled], .disabled) {
        &:hover {
            background-color: var(--alpha-contrast);
        }

        &:active {
            background-color: var(--alpha-contrast);
        }
    }
}

@mixin filled($background, $backgroundHover, $backgroundSelected) {
    background-color: $background;

    &:not([disabled], .disabled) {
        &:hover {
            background-color: $backgroundHover;
        }

        &:active {
            background-color: $backgroundSelected;
        }
    }
}

@layer components {
    // Remove regular button styling
    %clear {
        background: none;
        border: none;
        text-decoration: none;
        cursor: pointer;
        text-align: center;
        font-size: var(--font-size);
        font-family: var(--font-body);
        padding: var(--space-sm);
        margin: 0;
        border-radius: var(--border-radius);
    }

    .clear {
        @extend %clear;
    }

    .button {
        @extend %clear;

        --button-size: 40px;
        --button-internal: 24px;
        --button-font: var(--font-size-sm);

        &.large {
            --button-size: 64px;
            --button-internal: 40px;
            --button-font: var(--font-size-lg);
        }

        &.small {
            --button-size: 32px;
            --button-internal: 12px;
            --button-font: var(--font-size-xs);
        }

        width: auto;

        &.full {
            width: 100%;
        }

        height: var(--button-size);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: var(--space-sm);
        font-size: var(--button-font);
        font-weight: normal;
        gap: var(--space-xs);
        transition:
            background var(--transition-medium),
            transform var(--transition-medium),
            box-shadow var(--transition-medium),
            border-color var(--transition-medium),
            outline var(--transition-medium),
            color var(--transition-medium);

        span {
            height: var(--button-internal);
            display: flex;
            align-items: center;
            justify-content: center;
            text-wrap: nowrap;
        }

        svg {
            font-size: var(--button-size);
            width: var(--button-internal);
            height: var(--button-internal);
        }

        &.link {
            text-decoration: none !important;
        }

        border-radius: var(--border-radius);

        &.rounded {
            border-radius: var(--button-size);
            min-width: var(--button-size);
        }

        --button-default: var(--color-text);

        &.filled {
            @include filled(
                var(--context-color, var(--input-background-color)),
                var(--context-color-hover, var(--input-background-color-selected)),
                var(--context-color-active, var(--input-background-color-selected))
            );

            color: var(--context-color-text, var(--button-default));
        }

        &.outline {
            @include filled(var(--input-background-color), var(--input-background-color), var(--input-background-color));
            @include outline(var(--context-color, var(--input-border-color)), var(--context-color-hover, var(--input-color-active)), var(--context-color-active, var(--input-color-active)));
            @include dynamic-text(var(--context-color, var(--input-text-color)), var(--context-color-hover, var(--input-text-color)), var(--context-color-active, var(--input-text-color)));
        }

        &.ghost {
            @include ghost;
            @include dynamic-text(var(--context-color, var(--input-text-color)), var(--context-color-hover, var(--input-text-color)), var(--context-color-active, var(--input-text-color)));
        }

        &.text {
            @include dynamic-text(var(--context-color, var(--input-text-color)), var(--context-color-hover, var(--input-text-color-soft)), var(--context-color-active, var(--input-text-color-soft)));
        }

        &:not([disabled], .disabled) {
            &:focus {
                outline: none;
            }
        }

        &.loading {
            --button-color: var(--button-default);
            --button-secondary-color: var(--button-default);

            display: grid;
            place-items: center;

            > * {
                grid-row: 1;
                grid-column: 1;
            }
        }

        &[disabled],
        &.disabled {
            background-color: var(--input-background-color-disabled);
            border: none;
            color: var(--input-text-color-disabled) !important;
            cursor: not-allowed;
            filter: brightness(var(--filter-disabled-brightness)) saturate(var(--filter-disabled-saturation));
        }
    }
}
